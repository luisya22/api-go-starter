package validator

import "regexp"

// Precompiled regex pattern for validating email addresses.
var (
	EmailRX = regexp.MustCompile("^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$")
)

// Validator struct holds errors associated with validation checks.
type Validator struct {
	Errors map[string]string
}

// New initializes a new Validator with an empty error map.
func New() *Validator {
	return &Validator{Errors: make(map[string]string)}
}

// Valid checks if there are no errors in the validator.
func (v *Validator) Valid() bool {
	return len(v.Errors) == 0
}

// AddError adds an error message for a specific key if it doesn't already exist.
func (v *Validator) AddError(key, message string) {
	if _, exists := v.Errors[key]; !exists {
		v.Errors[key] = message
	}
}

// Check evaluates a condition and adds an error if the condition is false.
func (v *Validator) Check(ok bool, key, message string) {
	if !ok {
		v.AddError(key, message)
	}
}

// PermittedValue checks if a value is within a list of permitted values.
func PermittedValue[T comparable](value T, permittedValues ...T) bool {
	for _, permitted := range permittedValues {
		if value == permitted {
			return true
		}
	}
	return false
}

// Matches checks if a string value matches a given regular expression pattern.
func Matches(value string, rx *regexp.Regexp) bool {
	return rx.MatchString(value)
}

// Unique checks if all elements in a slice are unique.
func Unique[T comparable](values []T) bool {
	uniqueValues := make(map[T]bool)
	for _, value := range values {
		if uniqueValues[value] {
			return false
		}
		uniqueValues[value] = true
	}
	return true
}
