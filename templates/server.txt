package server

import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"
)

// Serve starts the HTTP server and handles graceful shutdown.
func (h *Handlers) Serve() error {
	srv := &http.Server{
		Addr:         fmt.Sprintf(":%d", h.app.Config.Port),
		Handler:      h.routes(),
		IdleTimeout:  time.Minute,
		ReadTimeout:  10 * time.Second,
		WriteTimeout: 30 * time.Second,
	}

	// Channel to receive shutdown errors
	shutdownError := make(chan error)

	// Goroutine to handle graceful shutdown on interrupt signals
	go func() {
		quit := make(chan os.Signal, 1)
		signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
		s := <-quit

		log.Printf("Shutting down server... Signal: %s", s)

		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()

		err := srv.Shutdown(ctx)
		if err != nil {
			shutdownError <- err
		}

		log.Println("Completing background tasks...")

		h.app.Wg.Wait()

		shutdownError <- nil
	}()

	log.Printf("Starting server on %s in %s mode", srv.Addr, h.app.Config.Env)

	// Start the server
	err := srv.ListenAndServe()
	if !errors.Is(err, http.ErrServerClosed) {
		return err
	}

	// Wait for shutdown or error
	err = <-shutdownError
	if err != nil {
		return err
	}

	log.Println("Server stopped gracefully")

	return nil
}
